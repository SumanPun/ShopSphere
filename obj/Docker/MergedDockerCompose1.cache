name: dockercompose15935036285019033983
services:
  basket.api:
    build:
      context: G:\ShopSphere
      dockerfile: Services/Basket/Basket.API/Dockerfile
    container_name: basket.api
    depends_on:
      basketdb:
        condition: service_started
        required: true
      rabbitmq:
        condition: service_started
        required: true
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      CacheSettings__ConnectionString: basketdb:6379
      EventBusSettings__HostAddress: amqp://guest:guest@rabbitmq:5672
      GrpcSettings__DiscountUrl: http://discount.api:8080
    image: basketapi
    networks:
      default: null
    ports:
      - mode: ingress
        target: 8080
        published: "8001"
        protocol: tcp
  basketdb:
    container_name: basketdb
    image: redis:alpine
    networks:
      default: null
    ports:
      - mode: ingress
        target: 6379
        published: "6379"
        protocol: tcp
    restart: always
  catalog.api:
    build:
      context: G:\ShopSphere
      dockerfile: Services/Catalog/Catalog.API/Dockerfile
    container_name: catalog.api
    depends_on:
      catalogdb:
        condition: service_started
        required: true
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      DatabaseSettings__BrandsCollection: Brands
      DatabaseSettings__CollectionName: Products
      DatabaseSettings__ConnectionString: mongodb://catalogdb:27017
      DatabaseSettings__DatabaseName: CatalogDb
      DatabaseSettings__TypesCollection: Types
    image: catalogapi
    networks:
      default: null
    ports:
      - mode: ingress
        target: 8080
        published: "8000"
        protocol: tcp
  catalogdb:
    container_name: catalogdb
    image: mongo
    networks:
      default: null
    ports:
      - mode: ingress
        target: 27017
        published: "27017"
        protocol: tcp
    restart: always
    volumes:
      - type: volume
        source: mongo_data
        target: /data/db
        volume: {}
  discount.api:
    build:
      context: G:\ShopSphere
      dockerfile: Services/Discount/Discount.API/Dockerfile
    container_name: discount.api
    depends_on:
      discountdb:
        condition: service_healthy
        required: true
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      DatabaseSettings__ConnectionString: Server=discountdb;Port=5432;Database=DiscountDb;User Id=admin;Password=Password@1;
    image: discountapi
    networks:
      default: null
    ports:
      - mode: ingress
        target: 8080
        published: "8002"
        protocol: tcp
  discountdb:
    container_name: discountdb
    environment:
      POSTGRES_DB: DiscountDb
      POSTGRES_PASSWORD: Password@1
      POSTGRES_USER: admin
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -U admin
      timeout: 5s
      interval: 10s
      retries: 5
    image: postgres
    networks:
      default: null
    ports:
      - mode: ingress
        target: 5432
        published: "5432"
        protocol: tcp
    restart: always
    volumes:
      - type: volume
        source: postgres_data
        target: /var/lib/postgresql/data
        volume: {}
  orderdb:
    container_name: orderdb
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: Suman1234567
    healthcheck:
      test:
        - CMD-SHELL
        - /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'Suman1234567' -Q 'select 1'
      timeout: 10s
      interval: 10s
      retries: 3
    image: mcr.microsoft.com/mssql/server:2022-latest
    networks:
      default: null
    ports:
      - mode: ingress
        target: 1433
        published: "1433"
        protocol: tcp
    restart: always
    volumes:
      - type: volume
        source: orderdb-data
        target: /var/opt/mssql
        volume: {}
  ordering.api:
    build:
      context: G:\ShopSphere
      dockerfile: Services/Ordering/Ordering.API/Dockerfile
    container_name: ordering.api
    depends_on:
      orderdb:
        condition: service_started
        required: true
      rabbitmq:
        condition: service_started
        required: true
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__OrderingConnectionString: Server=orderdb;Database=OrderDb;User Id=sa;Password=Suman1234567;TrustServerCertificate=True
      EventBusSettings__HostAddress: amqp://guest:guest@rabbitmq:5672
    image: orderingapi
    networks:
      default: null
    ports:
      - mode: ingress
        target: 8080
        published: "8003"
        protocol: tcp
  pgadmin:
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@eCommerce.net
      PGADMIN_DEFAULT_PASSWORD: Password@1
    image: dpage/pgadmin4
    networks:
      default: null
    ports:
      - mode: ingress
        target: 80
        published: "5050"
        protocol: tcp
    restart: always
    volumes:
      - type: volume
        source: pgadmin_data
        target: /root/.pgadmin
        volume: {}
  portainer:
    container_name: portainer
    image: portainer/portainer-ce
    networks:
      default: null
    ports:
      - mode: ingress
        target: 8000
        published: "8080"
        protocol: tcp
      - mode: ingress
        target: 9000
        published: "9090"
        protocol: tcp
    restart: always
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        bind:
          create_host_path: true
      - type: volume
        source: portainer_data
        target: /data
        volume: {}
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management-alpine
    networks:
      default: null
    ports:
      - mode: ingress
        target: 5672
        published: "5672"
        protocol: tcp
      - mode: ingress
        target: 15672
        published: "15672"
        protocol: tcp
    restart: always
networks:
  default:
    name: dockercompose15935036285019033983_default
volumes:
  mongo_data:
    name: dockercompose15935036285019033983_mongo_data
  orderdb-data:
    name: dockercompose15935036285019033983_orderdb-data
  pgadmin_data:
    name: dockercompose15935036285019033983_pgadmin_data
  portainer_data:
    name: dockercompose15935036285019033983_portainer_data
  postgres_data:
    name: dockercompose15935036285019033983_postgres_data